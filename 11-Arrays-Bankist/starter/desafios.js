'use strict';
console.log('DESAFIO NUMERO N춿 1');
/*
//Julia y Kate est치n haciendo un estudio sobre perros. Entonces cada uno de ellos pregunt칩 a 5 due침os de perros. sobre la edad de su perro y almacen칩 los datos en una matriz (una matriz para cada uno). Para ahora solo les interesa saber si un perro es adulto o cachorro. Un perro es adulto si tiene al menos 3 a침os y es cachorro si tiene menos de 3 a침os.

//Test data:
//Data 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
//Data 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]

// 1- Cree una funci칩n 'checkDogs', que acepte 2 matrices de edades de perros('dogsJulia' y 'dogsKate') y hace lo siguiente:
//1. Julia descubri칩 que los due침os del primer y del 칰ltimo perro en realidad ten칤an gatos, no perros! As칤 que crea una copia superficial de la matriz de Julia y elimina el gato. edades de esa matriz copiada (porque es una mala pr치ctica mutar la funci칩n par치metros)
//2. Cree una matriz con los datos de Julia (corregidos) y Kate.
//3. Para cada perro restante, inicie sesi칩n en la consola si es un adulto ("Perro n칰mero 1 es adulto y tiene 5 a침os") o un cachorro ("El perro n칰mero 2 todav칤a es un cachorro 游냤")
//4. Ejecute la funci칩n para ambos conjuntos de datos de prueba.

const checkDogs = function (dogsJulia, dogsKate) {
  //* creamos  una copia y quitamos los gatos
  const dogsJuliaCopy = dogsJulia.slice(1, dogsJulia.length - 1);
  //esta es otra forma de crear una copia superficial y quitar el primer y ultimo elemento
  //const dogsJuliaCopy = dogsJulia.slice();
  //dogsJuliaCopy.splice(0, 1);
  //dogsJuliaCopy.splice(-1);

  //* unimos las 2 matrizes
  const dogs = dogsJuliaCopy.concat(dogsKate);
  console.log(dogs);
  //* creamos el texto pedido
  dogs.forEach(function (perro, indice) {
    //* con el operador ternario determinamos si es adulto o cachorro
    const edad = perro >= 3 ? 'adulto 游냤' : 'cachorro 游냤';
    console.log(
      `el perro numero ${indice + 1} es un ${edad} tiene ${perro} a침os`
    );
  });
};
checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);
*/
console.log('DESAFIO N춿 2');
/*
//Volvamos al estudio de Julia y Kate sobre los perros. Esta vez quieren convertir edades de perros a edades humanas y calcular la edad promedio de los perros en su estudio

const arra1 = [5, 2, 4, 1, 15, 8, 3];
const arra2 = [16, 6, 10, 5, 6, 1, 4];

//Cree una funci칩n 'calcAverageHumanAge', que acepte matrices de perros envejece ('edades') y hace las siguientes cosas en orden:
//1. Calcula la edad del perro en a침os humanos usando la siguiente f칩rmula: si el perro es <= 2 a침os, edad humana = 2 * edad del perro. Si el perro tiene > 2 a침os, Edad humana = 16 + Edad del perro * 4
//2. Excluir a todos los perros que tengan menos de 18 a침os humanos (que es lo mismo que tener perros que tengan al menos 18 a침os)
//3. Calcula la edad humana promedio de todos los perros adultos (ya deber칤as saberlo) de otros desaf칤os c칩mo calculamos promedios 游땔)
//4. Ejecute la funci칩n para ambos conjuntos de datos de prueba.

const calcAverageHumanAge = function (array) {
  const edadHumana = array
    .map(function (ele) {
      if (ele <= 2) {
        return 2 * ele;
      } else if (ele > 2) {
        return 16 + ele * 4;
      }
    })
    .filter(function (ele) {
      return ele >= 18;
    })
    .reduce(function (acu, valor, _, array) {
      return acu + valor / array.length;
    }, 0);
  return edadHumana;
};
const final = calcAverageHumanAge(arra1);
console.log(final);

// este mismo codigo podemos hacerlo de otras formas
const calcAverageHumanAge1 = function (arr) {
  const edadHumana1 = arr.map(ele => (ele <= 2 ? 2 * ele : 16 + ele * 4));
  const perrosAdutos = edadHumana1.filter(ele => ele >= 18);
  const promedio =
    perrosAdutos.reduce((acu, ele, _, array) => acu + ele, 0) /
    perrosAdutos.length;

  return promedio;
};
const promedio1 = calcAverageHumanAge1(arra1);
console.log(promedio1);

// esta es ogra forma de hacerlo
const calcAverageHumanAge2 = function (array) {
  const edadHumana2 = array
    .map(ele => (ele <= 2 ? 2 * ele : 16 + ele * 4))
    .filter(ele => ele >= 18)
    .reduce((acu, ele, _, array) => acu + ele / array.length, 0);
  return edadHumana2;
};
const final2 = calcAverageHumanAge2(arra1);
console.log(final2);
*/
console.log('DESAFIO N춿 3');
// ESTE DESAFIO ES CREAR EL MISMO CODIGO DEL DESAFIO 2 , PERO AHOARA USANDO EL ENCADENAMIENTO DE METODOS. COSA QUE YA REALIZE EN EL DESAFIO NUMERO 2.

console.log('DESAFIO NUMERO 4');

//Julia y Kate todav칤a est치n estudiando perros, y esta vez est치n estudiando si los perros comen demasiado o muy poco. Comer demasiado significa que la porci칩n actual de comida del perro es mayor que la porci칩n recomendada, y comer muy poco es todo lo contrario. Comer una cantidad adecuada significa que la porci칩n actual de comida del perro est치 dentro del rango del 10%. por encima y 10% por debajo de la porci칩n recomendada (ver sugerencia).

const dogs = [
  { weight: 22, curFood: 250, owners: ['Alice', 'Bob'] },
  { weight: 8, curFood: 200, owners: ['Matilda'] },
  { weight: 13, curFood: 275, owners: ['Sarah', 'John'] },
  { weight: 32, curFood: 340, owners: ['Michael'] },
];

//Consejos:
//Utilice muchas herramientas diferentes para resolver estos desaf칤os, puede utilizar el resumen conferencia para elegir entre ellos 游땔
//Estar dentro de un rango de 10% por encima y por debajo de la porci칩n recomendada significa: actual > (recomendado * 0.90) && actual < (recomendado * 1.10). B치sicamente, la porci칩n actual deber칤a estar entre el 90% y el 110% del porci칩n recomendada.

//1. Recorra la matriz 'perros' que contiene objetos de perro y, para cada perro, calcule la porci칩n de comida recomendada y agr칠guela al objeto como una nueva propiedad. No cree una nueva matriz, simplemente recorra la matriz. Foro: alimento recomendado = peso ** 0,75 * 28. (El resultado est치 en gramos de comida, y el peso debe estar en kg)
dogs.forEach(function (perro) {
  console.log((perro.comidaRecomend = Math.trunc(perro.weight ** 0.75 * 28)));
});
console.log(dogs);
//2. Encuentra el perro de Sarah e inicia sesi칩n en la consola, ya sea que est칠 comiendo demasiado o demasiado poco. Pista: algunos perros tienen varios due침os, por lo que primero debes encontrar a Sarah en la matriz de propietarios, por lo que este es un poco complicado (a prop칩sito) 游뱁

//NOTA dogs.find(valor => valor.owners esto hasta ahora es un array por lo  tando debemos usar este metodo de array (include)
const saraDogs = dogs.find(valor => valor.owners.includes('Sarah'));
console.log(
  ` el perro de sarah come ${
    saraDogs.curFood > saraDogs.comidaRecomend ? 'mucho' : 'poco'
  }`
);

//3. Cree una matriz que contenga todos los due침os de perros que comen demasiado. ('ownersEatTooMuch') y una array con todos los due침os de perros que comen muy poco ('ownersEatTooLitle').
const ownersEatTooMuch = [];
const ownersEatTooLitle = [];

dogs.forEach(perro =>
  perro.curFood > perro.comidaRecomend
    ? ownersEatTooMuch.push(perro.owners)
    : ownersEatTooLitle.push(perro.owners)
);

console.log(ownersEatTooMuch.flat());
console.log(ownersEatTooLitle.flat());

//# esta es otra forma de realizar el mismo ejercicio
const ownersEatTooMuch1 = dogs
  .filter(perro => perro.curFood > perro.comidaRecomend)
  .map(perro => perro.owners)
  .flat();
const ownersEatTooLitle1 = dogs
  .filter(perro => perro.curFood < perro.comidaRecomend)
  .map(perro => perro.owners)
  .flat();
console.log(ownersEatTooMuch1);
console.log(ownersEatTooLitle1);

//4. Registre una cadena en la consola para cada matriz creada en 3., como esta: "Matilda y 춰Los perros de Alice y Bob comen demasiado!" y "Los perros de Sarah, John y Michael comen 춰Muy poco!".
console.log(
  `los perros de ${ownersEatTooLitle1} comen mucho y los perros de ${ownersEatTooLitle1} comen poco`
);

//# otra forma de realizarlo
console.log(
  `los perros de ${ownersEatTooLitle1.join(
    ' y '
  )} comen muy poco, y los perros de ${ownersEatTooMuch1.join(
    ' y '
  )} comen muy poco`
);

//5. Registre en la consola si hay alg칰n perro comiendo exactamente la cantidad de comida eso se recomienda (solo verdadero o falso)
console.log(dogs.includes(dogs.comidaRecomend === dogs.curFood));
console.log(dogs.some(perro => perro.comidaRecomend === perro.curFood));

//6. Inicie sesi칩n en la consola si hay alg칰n perro comiendo una cantidad adecuada de comida. (solo verdadero o falso)
console.log(
  dogs.some(
    perro =>
      perro.curFood > perro.comidaRecomend * 0.9 &&
      perro.curFood < perro.comidaRecomend * 1.1
  )
);

//7. Cree una matriz que contenga los perros que comen una buena cantidad de comida (pruebe reutilizar la condici칩n utilizada en 6.)

//guardamos la funcion en una variable para que sea mas facil
const perrosComenBien = dogs =>
  dogs.curFood > dogs.comidaRecomend * 0.9 &&
  dogs.curFood < dogs.comidaRecomend * 1.1;

//filter creara una funcion con los valores que cumplan la condicion osea los valores que sean 'true' en este caso solo hay un elemento true es por eso que solo nos arroja solo 1 objeto
console.log(dogs.filter(perrosComenBien));

//8. Cree una copia superficial de la matriz 'perros' y ord칠nela por alimento recomendado. porci칩n en orden ascendente (tenga en cuenta que las porciones est치n dentro del objetos de la matriz 游땔).
const ordenado = dogs
  .slice()
  .sort((actual, siguiente) =>
    actual.comidaRecomend > siguiente.comidaRecomend ? 1 : -1
  );
console.log(ordenado);

//# esta es otra forma de realizar el ejercicio
//RECORDAR el metodo 'sord' comparara el elemento actual(a) con el siguiente (b). tambien recordar que si a > b  entonces a - b siempre dara un numero positivo y si a < b entonces a - b siempre dara un valor negativo. si seguimos esta logica podemos hacer lo siguiente.
const perrosOrdenados = dogs
  .slice()
  .sort((a, b) => a.comidaRecomend - b.comidaRecomend);
console.log(perrosOrdenados);
